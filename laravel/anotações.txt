
Anotações para acompanhamento do curso de laravel

| Dando starter no servidor
| php artisan serve

|Ao instalar o laravel se faz necessario a migração das migrations que acompanham o sistema
|no mysql versão > 5.7 se faz necessário a correção de um bug. para corrigir se faz necessário aplicar uma linha em:
|projeto/app/providers/AppServiceProvider.php
|1 - use Illuminate\Support\Facades\Schema;
|E na função boot aplicar o comando.
|Schema::defaultStringLength(191);
|Assim já será possivel a instalação das migrations.

|Criando Migrations no laravel
|php artisan make:migration nome_da_migration
|Por convenção se for uma migration de criação o nome precisa ser definido pelo prefixo create_table
|-create_table -alter_table -drop_table
|ex: php artisan make:migration create_table_products
|Dica:
|ao criar tabela pode ser usado o comando $table->timestamps(); ele ira criar na table o campo created_at, update_at
|O metodo blueprint descreve a criação ou update no processo de migração das tabelas no laravel.

|Rollback de migrations
|comando: php artisan migrate:rollback
|ele ira fazer um rollback do ultimo lote executado é possivel visualizar os lotes na tabela migrations
|comandos:
|php artisan migrate:rollback --step=2 números de passos que você deseja executar o reset
|php artisan migrate:rollback:reset irá dropar todas as tabelas

|Seeders
|É utilizado para popular o banco de dados, auxiliando no desenvolvimento
|Comando:
|php artisan make:seeder nome_do_seeder
|ex: php artisan make:seeder ProductsTableSeeder
|obs: A cada seeder criado é necessario que ele seja chamado no DatabaseSeeder
|Comando executando seeder
|php artisan db:seed

|Executando migrate e seed juntos
|php artisan migrate --seed

|Factorys
|São usadas para popular o banco com dados fakes, caso precise de mais informações olhar a fundo a biblioteca faker

***************************************************************************************************************************
|Consulta Sql fora do modal 
|Algumas querys fora do models
|$sql = "SELECT * FROM users WHERE id=?";
|$users = \DB::select($sql, [12]);
|dd($users);
    
|outra forma de fazer
|$users = \DB::table('users')->get();
|dd($users);

|outra forma de fazer
|$users = \DB::table('users') ->where('id','=',13) ->get();
|dd($users);
 
|outra forma de fazer retornando os dados fora de um array
|$users = \DB::table('users') ->where('id','=',13) ->first();
|dd($users);
 
|outra forma de fazer retornando os dados fora de um array especificando as informacoes
|$users = \DB::table('users') ->where('id','=',13) ->select('id','name') ->first();
|dd($users);
 
|pegando o sql
|$users = \DB::table('users') ->where('id','=',13) ->select('id','name') ->toSql();
|dd($users);

|fazendo a mesma coisa porem usando a vista do modal
|em nenhum momento foi informado a tabela, pois o laravel por convencao ira por o nome da classe no plural e ira tentar
|encontrar a tabela. Ex class User , ele ira procurar na tabela users
| $users = \App\User::all();
|dd($users);
|ou com o where
|$users = \App\User::where('id',4)->select('id', 'name')->get();
|dd($users);
***************************************************************************************************************************
